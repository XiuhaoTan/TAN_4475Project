fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(1145152)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(1145153)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(1145154)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(1145155)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(1145)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(5201314)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(240253372)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(20250705)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(114515)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification")
set.seed(114515)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification",
xlab = Transform.Total_Trans_Ct,
ylab = Transform.Customer_Age)
set.seed(114515)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification",
xlab = 'Transform.Total_Trans_Ct',
ylab = 'Transform.Customer_Age')
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
model <- rpart(Util_Rank~*,data = train)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
model <- rpart(Util_Rank~Total_Revoving_Bal+Income_Category*,data = train)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
model <- rpart(Util_Rank~Total_Revoving_Bal+Income_Category,data = train)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
model <- rpart(Util_Rank~Total_Revolving_Bal+Income_Category,data = train)
prp(model,fallen.leaves = T)
rpart.plot(Tree)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
model <- rpart(Util_Rank~Total_Revolving_Bal+Income_Category,data = train)
Tree <- prp(model,fallen.leaves = T)
rpart.plot(Tree)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
Tree <- rpart(Util_Rank~Total_Revolving_Bal+Income_Category,data = train)
#prp(model,fallen.leaves = T)
rpart.plot(Tree)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
Tree <- rpart(Util_Rank~Total_Revolving_Bal+Income_Category,data = train)
#prp(model,fallen.leaves = T)
rpart.plot(Tree)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
Tree <- rpart(Util_Rank~Total_Revolving_Bal+Income_Category,data = train)
#prp(model,fallen.leaves = T)
rpart.plot(Tree)
View(new_custom)
View(BankChurners)
View(new_customer)
#make an enquiry
predict()
View(new_customer)
View(new_custom)
View(new_customer)
#NB Classification
data <- read.csv("new_custom.csv")
#NB Classification
data <- read.csv("Project_Dataset-20250601/Dataset/new_custom.csv")
# 数据预处理
data$Gender <- as.factor(data$Gender)
data$Education_Level <- as.factor(data$Education_Level)
data$Marital_Status <- as.factor(data$Marital_Status)
data$Income_Category <- as.factor(data$Income_Category)
# 分割数据集
set.seed(123)
training_indices <- sample(seq_len(nrow(data)), size = 0.7 * nrow(data))
train <- data[training_indices, ]
test <- data[-training_indices, ]
# 构建 Naive Bayes 模型
model <- naiveBayes(Util_Rank ~ ., data = train)
#NB Classification
#new customers
#make an enquiry
predict()
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
Tree <- rpart(Util_Rank~.,data = train)
rpart.plot(Tree)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
Tree <- rpart(Util_Rank~.,data = train)
rpart.plot(Tree)
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
Tree <- rpart(Util_Rank~Total_Revolving_Bal+Income_Category,data = train)
rpart.plot(Tree)
#NB Classification
model <- naiveBayes(Util_Rank ~ ., data = Transform)
View(model)
#NB Classification
model <- naiveBayes(Util_Rank ~ ., data = Transform)
#new customers
new_custom$Util_Rank <- predict(model, new_custom)
#make an enquiry
predict()
#NB Classification
model <- naiveBayes(Util_Rank ~ ., data = Transform)
#new customers
new_custom$Util_Rank <- predict(model, new_custom)
#make an enquiry
##predict()
str(Transform)
str(new_custom)
print(new_custom$Util_Rank)
#NB Classification
model <- naiveBayes(Util_Rank ~ ., data = Transform)
#new customers
new_custom$Util_Rank <- predict(model, new_custom)
print(new_custom$Util_Rank)
#make an enquiry
##predict()
#NB Classification
model <- naiveBayes(Util_Rank ~ Customer_Age+Gender+Dependent_count+Education_Level+Marital_Status
+Income_Category+Months_on_book+Total_Relationship_Count, data = Transform)
#new customers
new_custom$Util_Rank <- predict(model, new_custom)
print(new_custom$Util_Rank)
#make an enquiry
##predict()
#NB Classification
model <- naiveBayes(Util_Rank ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform)
#new customers
new_custom$Util_Rank <- predict(model, new_custom)
new_customer$Util_Rank <- predict(model, new_customer)
print(new_custom$Util_Rank)
print(new_customer$Util_Rank)
#make an enquiry
##predict()
#make an enquiry
predict(model, new_custom)
require(tidyverse)
require(data.table)
require(randomForest)
require(mclust)
require(rpart)
require(rpart.plot)
require(foreign)
require(e1071)
require(tidyverse)
require(data.table)
require(randomForest)
require(mclust)
require(rpart)
require(rpart.plot)
require(foreign)
require(e1071)
BankChurners <- read.csv("./Project_Dataset-20250601/Dataset/BankChurners.csv")
new_custom <- read.csv("./Project_Dataset-20250601/Dataset/new_custom.csv")
new_customer <- read.csv("./Project_Dataset-20250601/Dataset/new_customer.csv")
BankChurners
new_custom
new_customer
BankChurnerscheckNA <- is.na(BankChurners)
BankChurnerscheckNA
new_customcheckNA <- is.na(new_custom)
new_customcheckNA
new_customercheckNA <- is.na(new_customer)
new_customercheckNA
Transform <- BankChurners
Transform$Util_Rank <- sapply(Transform$Avg_Utilization_Ratio, function(x) {
if (x < 0.1) "Excellent"
else if (x < 0.3) "Good"
else if (x < 0.5) "Fair"
else "Poor"
})
Transform
#Summarise the average credit limit by different card type
avgCreditLimit <- tapply(Transform$Credit_Limit, Transform$Card_Category, mean)
as.data.frame(avgCreditLimit)
#count the number of different education level
educationCount <- table(Transform$Education_Level)
as.data.frame(educationCount)
#Summaries Average of Open to buy all Income Category
avgOpentobuy <- tapply(Transform$Avg_Open_To_Buy, Transform$Income_Category, mean)
as.data.frame(avgOpentobuy)
avgSorted <- sort(avgOpentobuy, decreasing = TRUE)
barplot(avgSorted,
main = "Average Open to Buy by Income Category",
xlab = "Income Category",
ylab = "Average Open To Buy",
cex.names = 0.7)
educationCount <- sort(educationCount,decreasing = TRUE)
pie(educationCount,
labels = names(educationCount))
#fit <- Mclust(Transform[, c("Total_Trans_Amt", "Total_Trans_Ct")])
plot(Transform$Total_Trans_Amt, Transform$Total_Trans_Ct,
xlab = "Transform$Total_Trans_Amt",
ylab = "Transform$Total_Trans_Ct")
abline(lm(Transform$Total_Trans_Ct ~ Transform$Total_Trans_Amt), col = "red")
rSquared <- summary(model)$r.squared
#fit <- Mclust(Transform[, c("Total_Trans_Amt", "Total_Trans_Ct")])
plot(Transform$Total_Trans_Amt, Transform$Total_Trans_Ct,
xlab = "Transform$Total_Trans_Amt",
ylab = "Transform$Total_Trans_Ct")
abline(lm(Transform$Total_Trans_Ct ~ Transform$Total_Trans_Amt), col = "red")
rSquared <- summary(model)$r.squared
require(tidyverse)
require(data.table)
require(randomForest)
require(mclust)
require(rpart)
require(rpart.plot)
require(foreign)
require(e1071)
BankChurners <- read.csv("./Project_Dataset-20250601/Dataset/BankChurners.csv")
new_custom <- read.csv("./Project_Dataset-20250601/Dataset/new_custom.csv")
new_customer <- read.csv("./Project_Dataset-20250601/Dataset/new_customer.csv")
BankChurners
new_custom
new_customer
BankChurnerscheckNA <- is.na(BankChurners)
BankChurnerscheckNA
new_customcheckNA <- is.na(new_custom)
new_customcheckNA
new_customercheckNA <- is.na(new_customer)
new_customercheckNA
Transform <- BankChurners
Transform$Util_Rank <- sapply(Transform$Avg_Utilization_Ratio, function(x) {
if (x < 0.1) "Excellent"
else if (x < 0.3) "Good"
else if (x < 0.5) "Fair"
else "Poor"
})
Transform
#Summarise the average credit limit by different card type
avgCreditLimit <- tapply(Transform$Credit_Limit, Transform$Card_Category, mean)
as.data.frame(avgCreditLimit)
#count the number of different education level
educationCount <- table(Transform$Education_Level)
as.data.frame(educationCount)
#Summaries Average of Open to buy all Income Category
avgOpentobuy <- tapply(Transform$Avg_Open_To_Buy, Transform$Income_Category, mean)
as.data.frame(avgOpentobuy)
avgSorted <- sort(avgOpentobuy, decreasing = TRUE)
barplot(avgSorted,
main = "Average Open to Buy by Income Category",
xlab = "Income Category",
ylab = "Average Open To Buy",
cex.names = 0.7)
educationCount <- sort(educationCount,decreasing = TRUE)
pie(educationCount,
labels = names(educationCount))
#fit <- Mclust(Transform[, c("Total_Trans_Amt", "Total_Trans_Ct")])
plot(Transform$Total_Trans_Amt, Transform$Total_Trans_Ct,
xlab = "Transform$Total_Trans_Amt",
ylab = "Transform$Total_Trans_Ct")
abline(lm(Transform$Total_Trans_Ct ~ Transform$Total_Trans_Amt), col = "red")
rSquared <- summary(model)$r.squared
fit <- Mclust(Transform[, c("Total_Trans_Amt", "Total_Trans_Ct")])
plot(Transform$Total_Trans_Amt, Transform$Total_Trans_Ct,
xlab = "Transform$Total_Trans_Amt",
ylab = "Transform$Total_Trans_Ct")
abline(lm(Transform$Total_Trans_Ct ~ Transform$Total_Trans_Amt), col = "red")
rSquared <- summary(model)$r.squared
#fit <- Mclust(Transform[, c("Total_Trans_Amt", "Total_Trans_Ct")])
plot(Transform$Total_Trans_Amt, Transform$Total_Trans_Ct,
xlab = "Transform$Total_Trans_Amt",
ylab = "Transform$Total_Trans_Ct")
abline(lm(Transform$Total_Trans_Ct ~ Transform$Total_Trans_Amt), col = "red")
model <- lm(Total_Trans_Ct ~ Total_Trans_Amt, data = Transform)
rSquared <- summary(model)$r.squared
text(x = max(Transform$Total_Trans_Amt) * 0.62,
y = max(Transform$Total_Trans_Ct) * 0.61,
labels = bquote(R^2 == .(round(r_squared, 2)))
)
#fit <- Mclust(Transform[, c("Total_Trans_Amt", "Total_Trans_Ct")])
plot(Transform$Total_Trans_Amt, Transform$Total_Trans_Ct,
xlab = "Transform$Total_Trans_Amt",
ylab = "Transform$Total_Trans_Ct")
abline(lm(Transform$Total_Trans_Ct ~ Transform$Total_Trans_Amt), col = "red")
model <- lm(Total_Trans_Ct ~ Total_Trans_Amt, data = Transform)
rSquared <- summary(model)$r.squared
text(x = max(Transform$Total_Trans_Amt) * 0.62,
y = max(Transform$Total_Trans_Ct) * 0.61,
labels = bquote(R^2 == .(round(rSquared, 2)))
)
set.seed(114515)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification",
xlab = 'Transform.Total_Trans_Ct',
ylab = 'Transform.Customer_Age')
#NB Classification
model <- naiveBayes(Util_Rank ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform)
#new customers
new_custom$Util_Rank <- predict(model, new_custom)
new_customer$Util_Rank <- predict(model, new_customer)
print(new_custom$Util_Rank)
print(new_customer$Util_Rank)
#make an enquiry
predict(model, new_custom)
BankChurners <- read.csv("./Project_Dataset-20250601/Dataset/BankChurners.csv")
BankChurners
BankChurnerscheckNA <- is.na(BankChurners)
BankChurnerscheckNA
#NB Classification
model <- naiveBayes(Util_Rank ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform)
#new customers
new_custom <- read.csv("./Project_Dataset-20250601/Dataset/new_custom.csv")
new_customer <- read.csv("./Project_Dataset-20250601/Dataset/new_customer.csv")
#make an enquiry
predict(model, new_custom)
predict(model, new_customer)
#model building
model <- randomForest(formula=Util_Rank ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform,ntree=200)
#model building
model <- randomForest(formula=Credit_Limit ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform,ntree=200)
#model testing
plot(model)
#new customer
#choose one row data for testing
predict(model, new_custom)
predict(model, new_customer)
#model building
model <- randomForest(formula=Credit_Limit ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform,ntree=1000)
#model testing
plot(model)
#new customer
#choose one row data for testing
predict(model, new_custom)
predict(model, new_customer)
View(BankChurners)
BankChurnerscheckNA
View(BankChurnerscheckNA)
require(tidyverse)
require(data.table)
require(randomForest)
require(mclust)
require(rpart)
require(rpart.plot)
require(foreign)
require(e1071)
require(tidyverse)
require(data.table)
require(randomForest)
require(mclust)
require(rpart)
require(rpart.plot)
require(foreign)
require(e1071)
BankChurners <- read.csv("./Project_Dataset-20250601/Dataset/BankChurners.csv")
BankChurners
BankChurnerscheckNA <- is.na(BankChurners)
BankChurnerscheckNA
Transform <- BankChurners
Transform$Util_Rank <- sapply(Transform$Avg_Utilization_Ratio, function(x) {
if (x < 0.1) "Excellent"
else if (x < 0.3) "Good"
else if (x < 0.5) "Fair"
else "Poor"
})
Transform
#Summarise the average credit limit by different card type
avgCreditLimit <- tapply(Transform$Credit_Limit, Transform$Card_Category, mean)
as.data.frame(avgCreditLimit)
#count the number of different education level
educationCount <- table(Transform$Education_Level)
as.data.frame(educationCount)
#Summaries Average of Open to buy all Income Category
avgOpentobuy <- tapply(Transform$Avg_Open_To_Buy, Transform$Income_Category, mean)
as.data.frame(avgOpentobuy)
avgSorted <- sort(avgOpentobuy, decreasing = TRUE)
barplot(avgSorted,
main = "Average Open to Buy by Income Category",
xlab = "Income Category",
ylab = "Average Open To Buy",
cex.names = 0.7)
educationCount <- sort(educationCount,decreasing = TRUE)
pie(educationCount,
labels = names(educationCount))
#fit <- Mclust(Transform[, c("Total_Trans_Amt", "Total_Trans_Ct")])
plot(Transform$Total_Trans_Amt, Transform$Total_Trans_Ct,
xlab = "Transform$Total_Trans_Amt",
ylab = "Transform$Total_Trans_Ct")
abline(lm(Transform$Total_Trans_Ct ~ Transform$Total_Trans_Amt), col = "red")
model <- lm(Total_Trans_Ct ~ Total_Trans_Amt, data = Transform)
rSquared <- summary(model)$r.squared
text(x = max(Transform$Total_Trans_Amt) * 0.62,
y = max(Transform$Total_Trans_Ct) * 0.61,
labels = bquote(R^2 == .(round(rSquared, 2)))
)
set.seed(114515)
fit <- Mclust(Transform[,c("Total_Trans_Ct","Customer_Age")],G = 4,modelNames = "EEE")
plot(fit, what = "classification",
xlab = 'Transform.Total_Trans_Ct',
ylab = 'Transform.Customer_Age')
size <- nrow(Transform)
training <- sample(seq(size),size*0.7,replace = F)
train <- Transform[training,]
test <- Transform[-training,]
Tree <- rpart(Util_Rank~Total_Revolving_Bal+Income_Category,data = train)
rpart.plot(Tree)
#NB Classification
model <- naiveBayes(Util_Rank ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform)
#new customers
new_custom <- read.csv("./Project_Dataset-20250601/Dataset/new_custom.csv")
new_customer <- read.csv("./Project_Dataset-20250601/Dataset/new_customer.csv")
#make an enquiry
predict(model, new_custom)
predict(model, new_customer)
#model building
model <- randomForest(formula=Credit_Limit ~ Customer_Age
+Gender
+Dependent_count
+Education_Level
+Marital_Status
+Income_Category
+Months_on_book
+Total_Relationship_Count, data = Transform,ntree=1000)
#model testing
plot(model)
#new customer
#choose one row data for testing
predict(model, new_custom)
predict(model, new_customer)
